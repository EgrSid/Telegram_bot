import telebot
from telebot import types
import sqlite3

bot = telebot.TeleBot('6649138539:AAHB_6A5d-lQYT7aQd27CtgOxZs7AyESX_M')
surname = ''
name = ''
patronymic = ''
birthday = ''
city = ''
phone_number = ''

def input_surname(message):
    global surname
    surname = message.text.strip()
    bot.send_message(message.chat.id, f'üîë*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n*–®–∞–≥:* 2 –∏–∑ 6\n\n–§–∞–º–∏–ª–∏—è: *{surname}*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è:', parse_mode="Markdown")
    bot.register_next_step_handler(message, input_name)

def input_name(message):
    global name, surname
    name = message.text.strip()
    bot.send_message(message.chat.id, f'*üîë–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n*–®–∞–≥:* 3 –∏–∑ 6\n\n–§–∞–º–∏–ª–∏—è: *{surname}*\
    \n–ò–º—è: *{name}*\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:', parse_mode="Markdown")
    bot.register_next_step_handler(message, input_patronymic)

def input_patronymic(message):
    global patronymic, name, surname
    patronymic = message.text.strip()
    bot.send_message(message.chat.id, f'üîë*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n*–®–∞–≥:* 4 –∏–∑ 6\n\n–§–∞–º–∏–ª–∏—è: *{surname}*\n–ò–º—è: *{name}*\
    \n–û—Ç—á–µ—Å—Ç–≤–æ: *{patronymic}*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: *14.11.1998*', parse_mode="Markdown")
    bot.register_next_step_handler(message, input_birthday)

def input_birthday(message):
    global birthday, patronymic, name, surname
    try:
        if int(message.text[:1]) <= 31 and int(message.text[3:5]) <= 12 and int(
                message.text[6:len(message.text) + 1]) >= 1920 \
                and int(message.text[6:len(message.text) + 1]) <= 2005 and message.text[2] == '.' and message.text[5] == '.':

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton('‚òéÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
            markup.add(btn)

            birthday = message.text.strip()

            bot.send_message(message.chat.id, f'üîë*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n*–®–∞–≥:* 5 –∏–∑ 6\n\n–§–∞–º–∏–ª–∏—è: *{surname}*\n–ò–º—è: *{name}*\
            \n–û—Ç—á–µ—Å—Ç–≤–æ: *{patronymic}*\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: *{birthday} –≥.*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\
                            \n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ "‚òéÔ∏è*–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*"‚§µÔ∏è', reply_markup=markup, parse_mode="Markdown")

            bot.register_next_step_handler(message, input_number)
        else:
            bot.send_message(message.chat.id, '‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:\
            \n\n(14 - –¥–µ–Ω—å, 11 - –º–µ—Å—è—Ü, 1998 - –≥–æ–¥)\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: *14.11.1998*', parse_mode="Markdown")
            bot.register_next_step_handler(message, input_birthday)
    except:
        bot.send_message(message.chat.id, '‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:\
                    \n\n(14 - –¥–µ–Ω—å, 11 - –º–µ—Å—è—Ü, 1998 - –≥–æ–¥)\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: *14.11.1998*', parse_mode="Markdown")
        bot.register_next_step_handler(message, input_birthday)

def input_number(message):
    global birthday, patronymic, name, surname, phone_number
    phone_number = message.contact.phone_number
    if message.contact is not None:
        bot.send_message(message.chat.id, f'üîë*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n*–®–∞–≥:* 6 –∏–∑ 6\n\n–§–∞–º–∏–ª–∏—è: *{surname}*\n–ò–º—è: *{name}*\
                \n–û—Ç—á–µ—Å—Ç–≤–æ: *{patronymic}*\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: *{birthday} –≥.*\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{phone_number}*\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥:', parse_mode="Markdown")

        bot.register_next_step_handler(message, input_city)

def input_city(message):
    global city, birthday, patronymic, name, surname, phone_number
    if message.text.lower().strip() == '–∏–≤–∞–Ω–æ–≤–æ':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='done')
        btn2 = types.InlineKeyboardButton('üîë–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ', callback_data='return')
        markup.add(btn1)
        markup.add(btn2)

        city = message.text.strip().capitalize()
        bot.send_message(message.chat.id, f'üîë*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n–§–∞–º–∏–ª–∏—è: *{surname}*\n–ò–º—è: *{name}*\
                        \n–û—Ç—á–µ—Å—Ç–≤–æ:*{patronymic}*\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: *{birthday} –≥.*\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{phone_number}*\n–ì–æ—Ä–æ–¥: *{city}*\
                        \n\n‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ‚§µÔ∏è', reply_markup=markup, parse_mode="Markdown")

    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        bot.register_next_step_handler(message, input_city)

def registration(message):
    conn = sqlite3.connect('Movers.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (surname, name, patronymic, birthday, phone_number, city, id_tlgrm) VALUES \
    ('%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (surname, name, patronymic, birthday, phone_number, city, message.chat.id))
    conn.commit()
    cur.close()
    conn.close()

def search_id_tlgrm(id_tlgrm):
    conn = sqlite3.connect('Movers.sql')
    cur = conn.execute('SELECT * FROM users')
    users = cur.fetchall()
    for i in users:
        if i[7] == str(id_tlgrm):
            return True
    return False



@bot.message_handler(commands=['start'])
def strart(message):
    conn = sqlite3.connect('Movers.sql')
    cur = conn.cursor()
    cur.execute(
        'CREATE TABLE IF NOT EXISTS \
        users (id int auto_increment primary key, surname varchar(50), name varchar(50), patronymic varchar(50), \
        birthday varchar(50), phone_number varchar(50), city varchar(50), id_tlgrm varchar(50))')
    conn.commit()
    cur.close()
    conn.close()

    if search_id_tlgrm(message.chat.id):
        bot.send_message(message.chat.id, '‚úÖ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç!\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!')
    else:
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton('üîë–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='reg')
        markup.add(btn)
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚§µÔ∏è', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_message(call):
    if call.data == 'reg' or call.data == 'return':
        bot.send_message(call.message.chat.id, 'üîë*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n*–®–∞–≥:* 1 –∏–∑ 6\n\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:', parse_mode="Markdown")
        bot.register_next_step_handler(call.message, input_surname)
    elif call.data == 'done':
        bot.delete_message(call.message.chat.id, call.message.message_id - 3)
        bot.send_message(call.message.chat.id, '‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!')
        bot.send_message(call.message.chat.id, '‚úÖ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç!\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!')
        bot.register_next_step_handler(call.message, registration)


@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        print(message.contact)

bot.infinity_polling()
